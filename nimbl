#!/usr/bin/node

/*
#    _  _ _       _    _
 #  : \: (#)_ __ : :__: :
#   : .` : : '  \: '_ \ :
 #  :_:\_:_:_:_:_:_.__/_:
# 
 #    A Thimbl-API client for Node
#     http://www.thimbl.net
 #    Dmytri Kleiner <dk@telekommunisten.net>
*/

process.on("uncaughtException", function (err) {
  console.log("Uncaught exception: " + err);
  console.log(err.stack);
  throw err;
});

require.paths.push("scripts");
require.paths.push("scripts/vendor");
require.paths.push("scripts/vendor/jsdom/lib");
require.paths.push("scripts/vendor/node-htmlparser/lib");
require.paths.push("scripts/vendor/node-XMLHttpRequest");

var Thimbl = require("thimbl").Thimbl,
  path  = require("path"),
  fs  = require("fs"),
  jsdom  = require("jsdom"),
  querystring  = require("querystring"),
  window = jsdom.jsdom().createWindow();

var Nimbl = function() {
  var thimbl = new Thimbl(window);
  thimbl.dotfile = path.join(process.env.HOME, ".nimbl");
  thimbl.user = function(callback) {
    fs.readFile(thimbl.dotfile, function(err, data) { 
      if (err) throw err;
      var user = JSON.parse(data).user;
      var login = JSON.parse(data).login;
      console.log(["=",user,"="].join(" "));
      callback(null, user, login);
    });
  }
  return thimbl;
};

jsdom.jQueryify(window, 'jquery.js', function() {
  window.XMLHttpRequest = require("XMLHttpRequest").XMLHttpRequest;
  if (!module.parent) {
   /* Console */
    var Operetta = require("node-operetta/operetta").Operetta;
    var operetta = new Operetta();
    var nimbl = new Nimbl();
    operetta.banner = "Nimbl. A Thimbl-API client for Node.";
    operetta.command("login", "login to thimbl", function(command) {
      command.banner = "Nimbl Login. Login to a Thimbl account\n";
      command.parameters(["-u","--user"], "account");
      command.parameters(["-p","--password"], "password");
      command.start(function(values) {
        var u = values["-u"],
          p = values["-p"];
        nimbl.login(u, p, function(err, data) {
          if (err) throw err;
          stream = fs.writeFile(nimbl.dotfile, JSON.stringify(data));
        });
      });
    });
    operetta.command("update", "update profile", function(command) {
      command.start(function(values) {
        var property = values.positional.shift();
        if (property) {
          nimbl.user(function(err, user, login) {
            nimbl.update(user, login, property, values.positional.join(" ")); 
          });
        }
      });
    });
    operetta.options(["-p","--profile"], "Show User Profile", function() {
      nimbl.user(function(err, user, login) {
        nimbl.profile(user, function(err, plan) {
          console.log("name", plan.name);
          console.log("address", plan.address);
          console.log("= properties =");
          for (p in plan.properties) {
            var v = plan.properties[p];
            if (v) {
              console.log(p,v);
            }
          }
        });
      });
    });
    operetta.parameters(["-P","--plan"], "Output Raw .plan file for any user", function(user) {
      console.log(["=",user,"="].join(" "));
      nimbl.profile(user, function(err, plan) {
        console.log(JSON.stringify(plan));
      });
    });
    operetta.start();
  } else module.exports.Nimbl = Nimbl;
});

